#!/bin/bash
# RNDIS:1 ECM:2
USB_ETH_MODE=2
# Router:1 Bridge:2
NETWORKING_MODE=2
WAITCOUNT=20
CONFIG_PATH=/etc/moxa-configs/moxa-ublox-config-utils.conf

trap exit_func EXIT

exit_func() {
	local ret=${?}
	case $ret in
	2)
		echo "Module does not configure properly. Please restart the service"
		;;
	3)
		echo "Invalid Module name tag for MMCLI"
		;;
	*) ;;

	esac
	exit ${ret}
}

load_config() {
	local mode=""
	source "${CONFIG_PATH}"

	mode="UBLOX_USB_ETH_MODE_${MODULE_NAME##*-}"
	if [ -n "${!mode}" ]; then
		USB_ETH_MODE=${!mode}
	elif [ -n "${UBLOX_USB_ETH_MODE}" ]; then
		USB_ETH_MODE=${UBLOX_USB_ETH_MODE}
	fi

	mode="UBLOX_NETWORKING_MODE_${MODULE_NAME##*-}"
	if [ -n "${!mode}" ]; then
		NETWORKING_MODE=${!mode}
	elif [ -n "${UBLOX_NETWORKING_MODE}" ]; then
		NETWORKING_MODE=${UBLOX_NETWORKING_MODE}
	fi

	if [ -n "${UBLOX_WAITCOUNT}" ]; then
		WAITCOUNT=${UBLOX_WAITCOUNT}
	fi

	echo "Use mode: ${USB_ETH_MODE},${NETWORKING_MODE}"
}

at() {
	local response=""
	if response="$(mmcli -m "${MODULE_NAME}" --command="${1^^}")"; then
		echo "${response}" | sed "s/response: \(.*\)/\1/g" | tr -d "'"
	else
		return 1
	fi
}

switch_mode() {
	local mode=""
	local s_mode=""
	local rndis_opt=""
	local need_reset=0

	mode=$(at "AT+UUSBCONF?" | grep -i "^+UUSBCONF:" | cut -d ',' -f 1 | cut -d ' ' -f 2)
	case "${USB_ETH_MODE}" in
	1)
		s_mode="3"
		;;
	2)
		s_mode="2"
		;;
	esac

	# Disable RNDIS optimization which would cause the
	# low throughput in linux platform under RNDIS mode.
	rndis_opt=$(at "AT+UDCONF=67" | grep '^+UDCONF' | cut -d ',' -f 2)
	if [ "${rndis_opt}" = "1" ]; then
		if at_retry "AT+UDCONF=67,0"; then
			need_reset=1
		else
			exit 2
		fi
	fi

	if [ "${s_mode}" != "${mode}" ]; then
		if at_retry "AT+UUSBCONF=${s_mode}"; then
			need_reset=1
		else
			exit 2
		fi
	fi

	mode=$(at "AT+UBMCONF?" | grep -i "^+UBMCONF:" | cut -d ' ' -f 2 | cut -d ',' -f 1)
	case "${NETWORKING_MODE}" in
	1)
		s_mode="1"
		;;
	2)
		s_mode="2"
		;;
	esac

	if [ "${s_mode}" != "${mode}" ]; then
		if at_retry "AT+UBMCONF=${s_mode}"; then
			need_reset=1
		else
			exit 2
		fi
	fi

	if [ ${need_reset} -eq 1 ]; then
		mmcli -m "${MODULE_NAME}" -r
	fi

	sleep 5
	wait_back
}

wait_back() {
	local timeout
	timeout=${WAITCOUNT}
	while ((timeout--)); do
		# First check the modem is scanned by mmcli
		if mmcli -m "${MODULE_NAME}" > /dev/null 2>&1; then
			if at "AT"; then
				break
			fi
		fi
		sleep 3
	done
}

at_retry() {
	local retry=3
	local cmd="${1}"
	while ((retry--)); do
		if at "${cmd}"; then
			return 0
		fi
		sleep 3
	done
	return 1
}

main() {
	if [ -z "${1}" ]; then
		exit 3
	else
		MODULE_NAME=${1}
	fi
	load_config
	wait_back
	switch_mode
	return 0
}

main "${@}"

exit 0
